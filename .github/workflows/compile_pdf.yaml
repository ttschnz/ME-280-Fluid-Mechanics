name: Prepare Script.pdf

on:
  pull_request:
    types: [closed]
    paths:
      - '**.tex'
      - '.github/workflows/compile_pdf.yaml'
  push:
    branches:
      - "**"
    paths:
      - '**.tex'
      - '.github/workflows/compile_pdf.yaml'

jobs:
  build-latex:
    outputs:
      new-tag: ${{ steps.bump_version.outputs.NEW_TAG }}
      latest-tag: ${{ steps.get_latest_tag.outputs.LATEST_TAG }}
    runs-on: ubuntu-latest
    steps:
      - name: Set up Git repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Compile LaTeX document
        id: compile
        uses: xu-cheng/latex-action@v3
        with:
          root_file: Script.tex
          latexmk_use_lualatex: true
          args: -pdf -interaction=nonstopmode -f

      - name: Upload logs on failure
        if: failure() && steps.compile.outcome == 'failure'
        uses: actions/upload-artifact@v4
        with:
          name: latex-logs
          path: |
            *.log
            *.aux
            *.out

      - name: Upload PDF file
        uses: actions/upload-artifact@v4
        with:
          name: Script
          path: Script.pdf

  create-prerelease:
    needs:
      - build-latex
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download Script
        uses: actions/download-artifact@v4
        with:
          name: Script
          path: .
  
      - name: Bump version
        id: bump_version
        run: |
          git fetch --tags
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")

          # Get the current DIN week number
          KW=$(date +%V)
          
          # Map DIN week to custom ranges
          if [ "$KW" -ge 8 ] && [ "$KW" -le 16 ]; then
            WEEK=$((10#$KW - 7))
          elif [ "$KW" -ge 18 ] && [ "$KW" -le 22 ]; then
            WEEK=$((10#$KW - 8))
          elif [ "$KW" -eq 17 ]; then
            WEEK=9 # spring break
          else
            WEEK="?"
          fi
          TITLE="Script Week $WEEK"
          echo "title=$TITLE" >> $GITHUB_OUTPUT
          IFS='.' read -ra VERSION_PARTS <<< "${LATEST_TAG#v}"
          MAJOR=${VERSION_PARTS[0]}
          MINOR=${VERSION_PARTS[1]}
          # if the week corresponds to the minor version, increment the patch version
          if [ "$WEEK" == "$MINOR" ]; then
            PATCH=$((VERSION_PARTS[2] + 1))
          else
            # otherwise, increment the minor version and reset the patch version
            PATCH=0
            MINOR=$((VERSION_PARTS[1] + 1))
          fi
          NEW_TAG="v$MAJOR.$MINOR.$PATCH"
          echo "NEW_TAG=$NEW_TAG" >> $GITHUB_OUTPUT

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.bump_version.outputs.NEW_TAG }}
          release_name: ${{ steps.bump_version.outputs.TITLE }} (${{ steps.bump_version.outputs.NEW_TAG }})
          draft: false
          prerelease: true

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./Script.pdf
          asset_name: Script.pdf
          asset_content_type: application/pdf
